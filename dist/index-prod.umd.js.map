{"version":3,"file":"index-prod.umd.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var shallowEqual = function shallowEqual(newValue, oldValue) {\n  return newValue === oldValue;\n};\n\nvar simpleIsEqual = function simpleIsEqual(newArgs, lastArgs) {\n  return newArgs.length === lastArgs.length && newArgs.every(function (newArg, index) {\n    return shallowEqual(newArg, lastArgs[index]);\n  });\n};\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n","// @flow\r\n\r\n// Animation frame based implementation of setTimeout.\r\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\r\n\r\nconst hasNativePerformanceNow =\r\n  typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nconst now = hasNativePerformanceNow\r\n  ? () => performance.now()\r\n  : () => Date.now();\r\n\r\nexport type TimeoutID = {|\r\n  id: AnimationFrameID,\r\n|};\r\n\r\nexport function cancelTimeout(timeoutID: TimeoutID) {\r\n  cancelAnimationFrame(timeoutID.id);\r\n}\r\n\r\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\r\n  const start = now();\r\n\r\n  function tick() {\r\n    if (now() - start >= delay) {\r\n      callback.call(null);\r\n    } else {\r\n      timeoutID.id = requestAnimationFrame(tick);\r\n    }\r\n  }\r\n\r\n  const timeoutID: TimeoutID = {\r\n    id: requestAnimationFrame(tick),\r\n  };\r\n\r\n  return timeoutID;\r\n}\r\n","// @flow\r\n\r\nlet size: number = -1;\r\n\r\n// This utility copied from \"dom-helpers\" package.\r\nexport function getScrollbarSize(recalculate?: boolean = false): number {\r\n  if (size === -1 || recalculate) {\r\n    const div = document.createElement('div');\r\n    const style = div.style;\r\n    style.width = '50px';\r\n    style.height = '50px';\r\n    style.overflow = 'scroll';\r\n\r\n    ((document.body: any): HTMLBodyElement).appendChild(div);\r\n\r\n    size = div.offsetWidth - div.clientWidth;\r\n\r\n    ((document.body: any): HTMLBodyElement).removeChild(div);\r\n  }\r\n\r\n  return size;\r\n}\r\n\r\nexport type RTLOffsetType =\r\n  | 'negative'\r\n  | 'positive-descending'\r\n  | 'positive-ascending';\r\n\r\nlet cachedRTLResult: RTLOffsetType | null = null;\r\n\r\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\r\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\r\n// The safest way to check this is to intentionally set a negative offset,\r\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\r\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\r\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\r\n  if (cachedRTLResult === null || recalculate) {\r\n    const outerDiv = document.createElement('div');\r\n    const outerStyle = outerDiv.style;\r\n    outerStyle.width = '50px';\r\n    outerStyle.height = '50px';\r\n    outerStyle.overflow = 'scroll';\r\n    outerStyle.direction = 'rtl';\r\n\r\n    const innerDiv = document.createElement('div');\r\n    const innerStyle = innerDiv.style;\r\n    innerStyle.width = '100px';\r\n    innerStyle.height = '100px';\r\n\r\n    outerDiv.appendChild(innerDiv);\r\n\r\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\r\n\r\n    if (outerDiv.scrollLeft > 0) {\r\n      cachedRTLResult = 'positive-descending';\r\n    } else {\r\n      outerDiv.scrollLeft = 1;\r\n      if (outerDiv.scrollLeft === 0) {\r\n        cachedRTLResult = 'negative';\r\n      } else {\r\n        cachedRTLResult = 'positive-ascending';\r\n      }\r\n    }\r\n\r\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\r\n\r\n    return cachedRTLResult;\r\n  }\r\n\r\n  return cachedRTLResult;\r\n}\r\n","// @flow\r\n\r\nimport memoizeOne from 'memoize-one';\r\nimport { createElement, PureComponent } from 'react';\r\nimport { cancelTimeout, requestTimeout } from './timer';\r\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\r\n\r\nimport type { TimeoutID } from './timer';\r\n\r\ntype Direction = 'ltr' | 'rtl';\r\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\r\n\r\ntype itemSize = number | ((index: number) => number);\r\n\r\ntype RenderComponentProps<T> = {|\r\n  columnIndex: number,\r\n  data: T,\r\n  isScrolling?: boolean,\r\n  rowIndex: number,\r\n  style: Object,\r\n|};\r\nexport type RenderComponent<T> = React$ComponentType<\r\n  $Shape<RenderComponentProps<T>>\r\n>;\r\n\r\ntype ScrollDirection = 'forward' | 'backward';\r\n\r\ntype OnItemsRenderedCallback = ({\r\n  overscanColumnStartIndex: number,\r\n  overscanColumnStopIndex: number,\r\n  overscanRowStartIndex: number,\r\n  overscanRowStopIndex: number,\r\n  visibleColumnStartIndex: number,\r\n  visibleColumnStopIndex: number,\r\n  visibleRowStartIndex: number,\r\n  visibleRowStopIndex: number,\r\n}) => void;\r\ntype OnScrollCallback = ({\r\n  horizontalScrollDirection: ScrollDirection,\r\n  scrollLeft: number,\r\n  scrollTop: number,\r\n  scrollUpdateWasRequested: boolean,\r\n  verticalScrollDirection: ScrollDirection,\r\n}) => void;\r\n\r\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\r\ntype ItemStyleCache = { [key: string]: Object };\r\n\r\ntype OuterProps = {|\r\n  children: React$Node,\r\n  className: string | void,\r\n  onScroll: ScrollEvent => void,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\ntype InnerProps = {|\r\n  children: React$Node,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\nexport type Props<T> = {|\r\n  children: RenderComponent<T>,\r\n  className?: string,\r\n  columnCount: number,\r\n  columnWidth: itemSize,\r\n  direction: Direction,\r\n  height: number,\r\n  initialScrollLeft?: number,\r\n  initialScrollTop?: number,\r\n  innerRef?: any,\r\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\r\n  innerTagName?: string, // deprecated\r\n  itemData: T,\r\n  itemKey?: (params: {|\r\n    columnIndex: number,\r\n    data: T,\r\n    rowIndex: number,\r\n  |}) => any,\r\n  onItemsRendered?: OnItemsRenderedCallback,\r\n  onScroll?: OnScrollCallback,\r\n  outerRef?: any,\r\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\r\n  outerTagName?: string, // deprecated\r\n  overscanColumnCount?: number,\r\n  overscanColumnsCount?: number, // deprecated\r\n  overscanCount?: number, // deprecated\r\n  overscanRowCount?: number,\r\n  overscanRowsCount?: number, // deprecated\r\n  rowCount: number,\r\n  rowHeight: itemSize,\r\n  style?: Object,\r\n  useIsScrolling: boolean,\r\n  width: number,\r\n  freezeRowCount?: number,\r\n  freezeColumnCount?: number,\r\n  extraBottomRightElement?: React$Element<any>,\r\n  extraBottomLeftElement?: React$Element<any>,\t\r\n  extraTopLeftElement?: React$Element<any>,\t\r\n  extraTopRightElement?: React$Element<any>,\r\n|};\r\n\r\ntype State = {|\r\n  instance: any,\r\n  isScrolling: boolean,\r\n  horizontalScrollDirection: ScrollDirection,\r\n  scrollLeft: number,\r\n  scrollTop: number,\r\n  scrollUpdateWasRequested: boolean,\r\n  verticalScrollDirection: ScrollDirection,\r\n|};\r\n\r\ntype getItemOffset = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype getItemSize = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\r\ntype GetOffsetForItemAndAlignment = (\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: any,\r\n  scrollbarSize: number\r\n) => number;\r\ntype GetStartIndexForOffset = (\r\n  props: Props<any>,\r\n  offset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStopIndexForStartIndex = (\r\n  props: Props<any>,\r\n  startIndex: number,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\r\ntype ValidateProps = (props: Props<any>) => void;\r\n\r\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\r\n\r\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\r\n  `${rowIndex}:${columnIndex}`;\r\n\r\n// In DEV mode, this Set helps us only log a warning once per component instance.\r\n// This avoids spamming the console every time a render happens.\r\nlet devWarningsOverscanCount = null;\r\nlet devWarningsOverscanRowsColumnsCount = null;\r\nlet devWarningsTagName = null;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\r\n    devWarningsOverscanCount = new WeakSet();\r\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\r\n    devWarningsTagName = new WeakSet();\r\n  }\r\n}\r\n\r\nexport default function createGridComponent({\r\n  getColumnOffset,\r\n  getColumnStartIndexForOffset,\r\n  getColumnStopIndexForStartIndex,\r\n  getColumnWidth,\r\n  getEstimatedTotalHeight,\r\n  getEstimatedTotalWidth,\r\n  getOffsetForColumnAndAlignment,\r\n  getOffsetForRowAndAlignment,\r\n  getRowHeight,\r\n  getRowOffset,\r\n  getRowStartIndexForOffset,\r\n  getRowStopIndexForStartIndex,\r\n  initInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange,\r\n  validateProps,\r\n}: {|\r\n  getColumnOffset: getItemOffset,\r\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\r\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  getColumnWidth: getItemSize,\r\n  getEstimatedTotalHeight: getEstimatedTotalSize,\r\n  getEstimatedTotalWidth: getEstimatedTotalSize,\r\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\r\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\r\n  getRowOffset: getItemOffset,\r\n  getRowHeight: getItemSize,\r\n  getRowStartIndexForOffset: GetStartIndexForOffset,\r\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  initInstanceProps: InitInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange: boolean,\r\n  validateProps: ValidateProps,\r\n|}) {\r\n  return class Grid<T> extends PureComponent<Props<T>, State> {\r\n    _instanceProps: any = initInstanceProps(this.props, this);\r\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\r\n    _outerRef: ?HTMLDivElement;\r\n\r\n    static defaultProps = {\r\n      direction: 'ltr',\r\n      itemData: undefined,\r\n      useIsScrolling: false,\r\n    };\r\n\r\n    state: State = {\r\n      instance: this,\r\n      isScrolling: false,\r\n      horizontalScrollDirection: 'forward',\r\n      scrollLeft:\r\n        typeof this.props.initialScrollLeft === 'number'\r\n          ? this.props.initialScrollLeft\r\n          : 0,\r\n      scrollTop:\r\n        typeof this.props.initialScrollTop === 'number'\r\n          ? this.props.initialScrollTop\r\n          : 0,\r\n      scrollUpdateWasRequested: false,\r\n      verticalScrollDirection: 'forward',\r\n    };\r\n\r\n    // Always use explicit constructor for React components.\r\n    // It produces less code after transpilation. (#26)\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props: Props<T>) {\r\n      super(props);\r\n    }\r\n\r\n    static getDerivedStateFromProps(\r\n      nextProps: Props<T>,\r\n      prevState: State\r\n    ): $Shape<State> | null {\r\n      validateSharedProps(nextProps, prevState);\r\n      validateProps(nextProps);\r\n      return null;\r\n    }\r\n\r\n    scrollTo({\r\n      scrollLeft,\r\n      scrollTop,\r\n    }: {\r\n      scrollLeft: number,\r\n      scrollTop: number,\r\n    }): void {\r\n      if (scrollLeft !== undefined) {\r\n        scrollLeft = Math.max(0, scrollLeft);\r\n      }\r\n      if (scrollTop !== undefined) {\r\n        scrollTop = Math.max(0, scrollTop);\r\n      }\r\n\r\n      this.setState(prevState => {\r\n        if (scrollLeft === undefined) {\r\n          scrollLeft = prevState.scrollLeft;\r\n        }\r\n        if (scrollTop === undefined) {\r\n          scrollTop = prevState.scrollTop;\r\n        }\r\n\r\n        if (\r\n          prevState.scrollLeft === scrollLeft &&\r\n          prevState.scrollTop === scrollTop\r\n        ) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          horizontalScrollDirection:\r\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\r\n          scrollLeft: scrollLeft,\r\n          scrollTop: scrollTop,\r\n          scrollUpdateWasRequested: true,\r\n          verticalScrollDirection:\r\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    }\r\n\r\n    scrollToItem({\r\n      align = 'auto',\r\n      columnIndex,\r\n      rowIndex,\r\n    }: {\r\n      align: ScrollToAlign,\r\n      columnIndex?: number,\r\n      rowIndex?: number,\r\n    }): void {\r\n      const { columnCount, height, rowCount, width } = this.props;\r\n      const { scrollLeft, scrollTop } = this.state;\r\n      const scrollbarSize = getScrollbarSize();\r\n\r\n      if (columnIndex !== undefined) {\r\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\r\n      }\r\n      if (rowIndex !== undefined) {\r\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\r\n      }\r\n\r\n      const estimatedTotalHeight = getEstimatedTotalHeight(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n      const estimatedTotalWidth = getEstimatedTotalWidth(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      // The scrollbar size should be considered when scrolling an item into view,\r\n      // to ensure it's fully visible.\r\n      // But we only need to account for its size when it's actually visible.\r\n      const horizontalScrollbarSize =\r\n        estimatedTotalWidth > width ? scrollbarSize : 0;\r\n      const verticalScrollbarSize =\r\n        estimatedTotalHeight > height ? scrollbarSize : 0;\r\n\r\n      this.scrollTo({\r\n        scrollLeft:\r\n          columnIndex !== undefined\r\n            ? getOffsetForColumnAndAlignment(\r\n                this.props,\r\n                columnIndex,\r\n                align,\r\n                scrollLeft,\r\n                this._instanceProps,\r\n                verticalScrollbarSize\r\n              )\r\n            : scrollLeft,\r\n        scrollTop:\r\n          rowIndex !== undefined\r\n            ? getOffsetForRowAndAlignment(\r\n                this.props,\r\n                rowIndex,\r\n                align,\r\n                scrollTop,\r\n                this._instanceProps,\r\n                horizontalScrollbarSize\r\n              )\r\n            : scrollTop,\r\n      });\r\n    }\r\n\r\n    componentDidMount() {\r\n      const { initialScrollLeft, initialScrollTop } = this.props;\r\n\r\n      if (this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        if (typeof initialScrollLeft === 'number') {\r\n          outerRef.scrollLeft = initialScrollLeft;\r\n        }\r\n        if (typeof initialScrollTop === 'number') {\r\n          outerRef.scrollTop = initialScrollTop;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const { direction } = this.props;\r\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\r\n\r\n      if (scrollUpdateWasRequested && this._outerRef != null) {\r\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        if (direction === 'rtl') {\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              outerRef.scrollLeft = -scrollLeft;\r\n              break;\r\n            case 'positive-ascending':\r\n              outerRef.scrollLeft = scrollLeft;\r\n              break;\r\n            default:\r\n              const { clientWidth, scrollWidth } = outerRef;\r\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        } else {\r\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\r\n        }\r\n\r\n        outerRef.scrollTop = Math.max(0, scrollTop);\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        children,\r\n        className,\r\n        columnCount,\r\n        direction,\r\n        height,\r\n        innerRef,\r\n        innerElementType,\r\n        innerTagName,\r\n        itemData,\r\n        itemKey = defaultItemKey,\r\n        outerElementType,\r\n        outerTagName,\r\n        rowCount,\r\n        style,\r\n        useIsScrolling,\r\n        width,\r\n        extraBottomRightElement,\r\n        extraBottomLeftElement,\t\r\n        extraTopLeftElement,\t\r\n        extraTopRightElement,\r\n      } = this.props;\r\n      const { isScrolling } = this.state;\r\n\r\n      const [\r\n        columnStartIndex,\r\n        columnStopIndex,\r\n      ] = this._getHorizontalRangeToRender();\r\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\r\n\r\n      const items = [];\r\n      if (columnCount > 0 && rowCount) {\r\n        for (\r\n          let rowIndex = rowStartIndex;\r\n          rowIndex <= rowStopIndex;\r\n          rowIndex++\r\n        ) {\r\n          for (\r\n            let columnIndex = columnStartIndex;\r\n            columnIndex <= columnStopIndex;\r\n            columnIndex++\r\n          ) {\r\n            items.push(\r\n              createElement(children, {\r\n                columnIndex,\r\n                data: itemData,\r\n                isScrolling: useIsScrolling ? isScrolling : undefined,\r\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\r\n                rowIndex,\r\n                style: this._getItemStyle(rowIndex, columnIndex),\r\n              })\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // freeze row (top-right pane)\r\n      if (freezeRowCount) {\r\n        for (let rowIndex = 0; rowIndex < freezeRowCount; rowIndex++) {\r\n          for (\r\n            let columnIndex = Math.max(freezeColumnCount, columnStartIndex);\r\n            columnIndex <= columnStopIndex;\r\n            columnIndex++\r\n          ) {\r\n            freezeTopRightItems.push(\r\n              createElement(children, {\r\n                columnIndex,\r\n                data: itemData,\r\n                isScrolling: useIsScrolling ? isScrolling : undefined,\r\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\r\n                rowIndex,\r\n                style: this._getItemStyle(rowIndex, columnIndex),\r\n              })\r\n            );\r\n          }\r\n        }\r\n        if (extraTopRightElement)\tfreezeTopRightItems.push(extraTopRightElement);\r\n      }\r\n\r\n      // freeze column (bottom-left pane)\r\n      if (freezeColumnCount) {\r\n        const topLeftStyle = this._getItemStyle(\r\n          freezeRowCount,\r\n          freezeColumnCount\r\n        );\r\n        for (\r\n          let rowIndex = Math.max(freezeRowCount, rowStartIndex);\r\n          rowIndex <= rowStopIndex;\r\n          rowIndex++\r\n        ) {\r\n          for (\r\n            let columnIndex = 0;\r\n            columnIndex < freezeColumnCount;\r\n            columnIndex++\r\n          ) {\r\n            let style = Object.assign(\r\n              {},\r\n              this._getItemStyle(rowIndex, columnIndex)\r\n            );\r\n            style.top -= topLeftStyle.top;\r\n            freezeBottomLeftItems.push(\r\n              createElement(children, {\r\n                columnIndex,\r\n                data: itemData,\r\n                isScrolling: useIsScrolling ? isScrolling : undefined,\r\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\r\n                rowIndex,\r\n                style,\r\n              })\r\n            );\r\n          }\r\n        }\r\n        if (extraBottomLeftElement)\tfreezeBottomLeftItems.push(extraBottomLeftElement);\t\r\n      }\r\n\r\n      // freeze top-left pane\r\n      if (freezeColumnCount && freezeRowCount) {\r\n        for (let rowIndex = 0; rowIndex < freezeRowCount; rowIndex++) {\r\n          for (\r\n            let columnIndex = 0;\r\n            columnIndex < freezeColumnCount;\r\n            columnIndex++\r\n          ) {\r\n            freezeTopLeftItems.push(\r\n              createElement(children, {\r\n                columnIndex,\r\n                data: itemData,\r\n                isScrolling: useIsScrolling ? isScrolling : undefined,\r\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\r\n                rowIndex,\r\n                style: this._getItemStyle(rowIndex, columnIndex),\r\n              })\r\n            );\r\n          }\r\n        }\r\n\r\n        if (extraTopLeftElement) freezeTopLeftItems.push(extraTopLeftElement);\r\n      }\r\n      // Read this value AFTER items have been created,\r\n      // So their actual sizes (if variable) are taken into consideration.\r\n      const estimatedTotalHeight = getEstimatedTotalHeight(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n      const estimatedTotalWidth = getEstimatedTotalWidth(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      return createElement(\r\n        outerElementType || outerTagName || 'div',\r\n        {\r\n          className,\r\n          onScroll: this._onScroll,\r\n          ref: this._outerRefSetter,\r\n          style: {\r\n            position: 'relative',\r\n            height,\r\n            width,\r\n            overflow: 'auto',\r\n            WebkitOverflowScrolling: 'touch',\r\n            willChange: 'transform',\r\n            direction,\r\n            ...style,\r\n          },\r\n        },\r\n        createElement(innerElementType || innerTagName || 'div', {\r\n          children: items,\r\n          ref: innerRef,\r\n          style: {\r\n            height: estimatedTotalHeight,\r\n            pointerEvents: isScrolling ? 'none' : undefined,\r\n            width: estimatedTotalWidth,\r\n          },\r\n        }),\r\n        extraBottomRightElement\r\n      );\r\n    }\r\n\r\n    _callOnItemsRendered: (\r\n      overscanColumnStartIndex: number,\r\n      overscanColumnStopIndex: number,\r\n      overscanRowStartIndex: number,\r\n      overscanRowStopIndex: number,\r\n      visibleColumnStartIndex: number,\r\n      visibleColumnStopIndex: number,\r\n      visibleRowStartIndex: number,\r\n      visibleRowStopIndex: number\r\n    ) => void;\r\n    _callOnItemsRendered = memoizeOne(\r\n      (\r\n        overscanColumnStartIndex: number,\r\n        overscanColumnStopIndex: number,\r\n        overscanRowStartIndex: number,\r\n        overscanRowStopIndex: number,\r\n        visibleColumnStartIndex: number,\r\n        visibleColumnStopIndex: number,\r\n        visibleRowStartIndex: number,\r\n        visibleRowStopIndex: number\r\n      ) =>\r\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\r\n          overscanColumnStartIndex,\r\n          overscanColumnStopIndex,\r\n          overscanRowStartIndex,\r\n          overscanRowStopIndex,\r\n          visibleColumnStartIndex,\r\n          visibleColumnStopIndex,\r\n          visibleRowStartIndex,\r\n          visibleRowStopIndex,\r\n        })\r\n    );\r\n\r\n    _callOnScroll: (\r\n      scrollLeft: number,\r\n      scrollTop: number,\r\n      horizontalScrollDirection: ScrollDirection,\r\n      verticalScrollDirection: ScrollDirection,\r\n      scrollUpdateWasRequested: boolean\r\n    ) => void;\r\n    _callOnScroll = memoizeOne(\r\n      (\r\n        scrollLeft: number,\r\n        scrollTop: number,\r\n        horizontalScrollDirection: ScrollDirection,\r\n        verticalScrollDirection: ScrollDirection,\r\n        scrollUpdateWasRequested: boolean\r\n      ) =>\r\n        ((this.props.onScroll: any): OnScrollCallback)({\r\n          horizontalScrollDirection,\r\n          scrollLeft,\r\n          scrollTop,\r\n          verticalScrollDirection,\r\n          scrollUpdateWasRequested,\r\n        })\r\n    );\r\n\r\n    _callPropsCallbacks() {\r\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\r\n\r\n      if (typeof onItemsRendered === 'function') {\r\n        if (columnCount > 0 && rowCount > 0) {\r\n          const [\r\n            overscanColumnStartIndex,\r\n            overscanColumnStopIndex,\r\n            visibleColumnStartIndex,\r\n            visibleColumnStopIndex,\r\n          ] = this._getHorizontalRangeToRender();\r\n          const [\r\n            overscanRowStartIndex,\r\n            overscanRowStopIndex,\r\n            visibleRowStartIndex,\r\n            visibleRowStopIndex,\r\n          ] = this._getVerticalRangeToRender();\r\n          this._callOnItemsRendered(\r\n            overscanColumnStartIndex,\r\n            overscanColumnStopIndex,\r\n            overscanRowStartIndex,\r\n            overscanRowStopIndex,\r\n            visibleColumnStartIndex,\r\n            visibleColumnStopIndex,\r\n            visibleRowStartIndex,\r\n            visibleRowStopIndex\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof onScroll === 'function') {\r\n        const {\r\n          horizontalScrollDirection,\r\n          scrollLeft,\r\n          scrollTop,\r\n          scrollUpdateWasRequested,\r\n          verticalScrollDirection,\r\n        } = this.state;\r\n        this._callOnScroll(\r\n          scrollLeft,\r\n          scrollTop,\r\n          horizontalScrollDirection,\r\n          verticalScrollDirection,\r\n          scrollUpdateWasRequested\r\n        );\r\n      }\r\n    }\r\n\r\n    // Lazily create and cache item styles while scrolling,\r\n    // So that pure component sCU will prevent re-renders.\r\n    // We maintain this cache, and pass a style prop rather than index,\r\n    // So that List can clear cached styles and force item re-render if necessary.\r\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\r\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\r\n      const { columnWidth, direction, rowHeight } = this.props;\r\n\r\n      const itemStyleCache = this._getItemStyleCache(\r\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\r\n        shouldResetStyleCacheOnItemSizeChange && direction,\r\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\r\n      );\r\n\r\n      const key = `${rowIndex}:${columnIndex}`;\r\n\r\n      let style;\r\n      if (itemStyleCache.hasOwnProperty(key)) {\r\n        style = itemStyleCache[key];\r\n      } else {\r\n        const offset = getColumnOffset(\r\n          this.props,\r\n          columnIndex,\r\n          this._instanceProps\r\n        );\r\n        const isRtl = direction === 'rtl';\r\n        itemStyleCache[key] = style = {\r\n          position: 'absolute',\r\n          left: isRtl ? undefined : offset,\r\n          right: isRtl ? offset : undefined,\r\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\r\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\r\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\r\n        };\r\n      }\r\n\r\n      return style;\r\n    };\r\n\r\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\r\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\r\n\r\n    _getHorizontalRangeToRender(): [number, number, number, number] {\r\n      const {\r\n        columnCount,\r\n        overscanColumnCount,\r\n        overscanColumnsCount,\r\n        overscanCount,\r\n        rowCount,\r\n      } = this.props;\r\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\r\n\r\n      const overscanCountResolved: number =\r\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\r\n\r\n      if (columnCount === 0 || rowCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getColumnStartIndexForOffset(\r\n        this.props,\r\n        scrollLeft,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getColumnStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollLeft,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || horizontalScrollDirection === 'backward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || horizontalScrollDirection === 'forward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _getVerticalRangeToRender(): [number, number, number, number] {\r\n      const {\r\n        columnCount,\r\n        overscanCount,\r\n        overscanRowCount,\r\n        overscanRowsCount,\r\n        rowCount,\r\n      } = this.props;\r\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\r\n\r\n      const overscanCountResolved: number =\r\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\r\n\r\n      if (columnCount === 0 || rowCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getRowStartIndexForOffset(\r\n        this.props,\r\n        scrollTop,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getRowStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollTop,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || verticalScrollDirection === 'backward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || verticalScrollDirection === 'forward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _onScroll = (event: ScrollEvent): void => {\r\n      const {\r\n        clientHeight,\r\n        clientWidth,\r\n        scrollLeft,\r\n        scrollTop,\r\n        scrollHeight,\r\n        scrollWidth,\r\n      } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (\r\n          prevState.scrollLeft === scrollLeft &&\r\n          prevState.scrollTop === scrollTop\r\n        ) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        const { direction } = this.props;\r\n\r\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\r\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\r\n        let calculatedScrollLeft = scrollLeft;\r\n        if (direction === 'rtl') {\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              calculatedScrollLeft = -scrollLeft;\r\n              break;\r\n            case 'positive-descending':\r\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        calculatedScrollLeft = Math.max(\r\n          0,\r\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\r\n        );\r\n        const calculatedScrollTop = Math.max(\r\n          0,\r\n          Math.min(scrollTop, scrollHeight - clientHeight)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          horizontalScrollDirection:\r\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\r\n          scrollLeft: calculatedScrollLeft,\r\n          scrollTop: calculatedScrollTop,\r\n          verticalScrollDirection:\r\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _outerRefSetter = (ref: any): void => {\r\n      const { outerRef } = this.props;\r\n\r\n      this._outerRef = ((ref: any): HTMLDivElement);\r\n\r\n      if (typeof outerRef === 'function') {\r\n        outerRef(ref);\r\n      } else if (\r\n        outerRef != null &&\r\n        typeof outerRef === 'object' &&\r\n        outerRef.hasOwnProperty('current')\r\n      ) {\r\n        outerRef.current = ref;\r\n      }\r\n    };\r\n\r\n    _resetIsScrollingDebounced = () => {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n\r\n      this._resetIsScrollingTimeoutId = requestTimeout(\r\n        this._resetIsScrolling,\r\n        IS_SCROLLING_DEBOUNCE_INTERVAL\r\n      );\r\n    };\r\n\r\n    _resetIsScrolling = () => {\r\n      this._resetIsScrollingTimeoutId = null;\r\n\r\n      this.setState({ isScrolling: false }, () => {\r\n        // Clear style cache after state update has been committed.\r\n        // This way we don't break pure sCU for items that don't use isScrolling param.\r\n        this._getItemStyleCache(-1);\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\nconst validateSharedProps = (\r\n  {\r\n    children,\r\n    direction,\r\n    height,\r\n    innerTagName,\r\n    outerTagName,\r\n    overscanColumnsCount,\r\n    overscanCount,\r\n    overscanRowsCount,\r\n    width,\r\n  }: Props<any>,\r\n  { instance }: State\r\n): void => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof overscanCount === 'number') {\r\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\r\n        devWarningsOverscanCount.add(instance);\r\n        console.warn(\r\n          'The overscanCount prop has been deprecated. ' +\r\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (\r\n      typeof overscanColumnsCount === 'number' ||\r\n      typeof overscanRowsCount === 'number'\r\n    ) {\r\n      if (\r\n        devWarningsOverscanRowsColumnsCount &&\r\n        !devWarningsOverscanRowsColumnsCount.has(instance)\r\n      ) {\r\n        devWarningsOverscanRowsColumnsCount.add(instance);\r\n        console.warn(\r\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\r\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (innerTagName != null || outerTagName != null) {\r\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\r\n        devWarningsTagName.add(instance);\r\n        console.warn(\r\n          'The innerTagName and outerTagName props have been deprecated. ' +\r\n            'Please use the innerElementType and outerElementType props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (children == null) {\r\n      throw Error(\r\n        'An invalid \"children\" prop has been specified. ' +\r\n          'Value should be a React component. ' +\r\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\r\n      );\r\n    }\r\n\r\n    switch (direction) {\r\n      case 'ltr':\r\n      case 'rtl':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"direction\" prop has been specified. ' +\r\n            'Value should be either \"ltr\" or \"rtl\". ' +\r\n            `\"${direction}\" was specified.`\r\n        );\r\n    }\r\n\r\n    if (typeof width !== 'number') {\r\n      throw Error(\r\n        'An invalid \"width\" prop has been specified. ' +\r\n          'Grids must specify a number for width. ' +\r\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\r\n      );\r\n    }\r\n\r\n    if (typeof height !== 'number') {\r\n      throw Error(\r\n        'An invalid \"height\" prop has been specified. ' +\r\n          'Grids must specify a number for height. ' +\r\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\r\n      );\r\n    }\r\n  }\r\n};\r\n","// @flow\r\n\r\nimport createGridComponent from './createGridComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createGridComponent';\r\n\r\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\r\n\r\ntype VariableSizeProps = {|\r\n  estimatedColumnWidth: number,\r\n  estimatedRowHeight: number,\r\n  ...Props<any>,\r\n|};\r\n\r\ntype itemSizeGetter = (index: number) => number;\r\ntype ItemType = 'column' | 'row';\r\n\r\ntype ItemMetadata = {|\r\n  offset: number,\r\n  size: number,\r\n|};\r\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\r\ntype InstanceProps = {|\r\n  columnMetadataMap: ItemMetadataMap,\r\n  estimatedColumnWidth: number,\r\n  estimatedRowHeight: number,\r\n  lastMeasuredColumnIndex: number,\r\n  lastMeasuredRowIndex: number,\r\n  rowMetadataMap: ItemMetadataMap,\r\n|};\r\n\r\nconst getEstimatedTotalHeight = (\r\n  { rowCount }: Props<any>,\r\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredRows = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredRowIndex >= rowCount) {\r\n    lastMeasuredRowIndex = rowCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredRowIndex >= 0) {\r\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\r\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\r\n\r\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst getEstimatedTotalWidth = (\r\n  { columnCount }: Props<any>,\r\n  {\r\n    columnMetadataMap,\r\n    estimatedColumnWidth,\r\n    lastMeasuredColumnIndex,\r\n  }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredRows = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredColumnIndex >= columnCount) {\r\n    lastMeasuredColumnIndex = columnCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredColumnIndex >= 0) {\r\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\r\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\r\n\r\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst getItemMetadata = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: InstanceProps\r\n): ItemMetadata => {\r\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\r\n  if (itemType === 'column') {\r\n    itemMetadataMap = instanceProps.columnMetadataMap;\r\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\r\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\r\n  } else {\r\n    itemMetadataMap = instanceProps.rowMetadataMap;\r\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\r\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\r\n  }\r\n\r\n  if (index > lastMeasuredIndex) {\r\n    let offset = 0;\r\n    if (lastMeasuredIndex >= 0) {\r\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n      offset = itemMetadata.offset + itemMetadata.size;\r\n    }\r\n\r\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\r\n      let size = itemSize(i);\r\n\r\n      itemMetadataMap[i] = {\r\n        offset,\r\n        size,\r\n      };\r\n\r\n      offset += size;\r\n    }\r\n\r\n    if (itemType === 'column') {\r\n      instanceProps.lastMeasuredColumnIndex = index;\r\n    } else {\r\n      instanceProps.lastMeasuredRowIndex = index;\r\n    }\r\n  }\r\n\r\n  return itemMetadataMap[index];\r\n};\r\n\r\nconst findNearestItem = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  offset: number\r\n) => {\r\n  let itemMetadataMap, lastMeasuredIndex;\r\n  if (itemType === 'column') {\r\n    itemMetadataMap = instanceProps.columnMetadataMap;\r\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\r\n  } else {\r\n    itemMetadataMap = instanceProps.rowMetadataMap;\r\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\r\n  }\r\n\r\n  const lastMeasuredItemOffset =\r\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\r\n\r\n  if (lastMeasuredItemOffset >= offset) {\r\n    // If we've already measured items within this range just use a binary search as it's faster.\r\n    return findNearestItemBinarySearch(\r\n      itemType,\r\n      props,\r\n      instanceProps,\r\n      lastMeasuredIndex,\r\n      0,\r\n      offset\r\n    );\r\n  } else {\r\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\r\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\r\n    // The overall complexity for this approach is O(log n).\r\n    return findNearestItemExponentialSearch(\r\n      itemType,\r\n      props,\r\n      instanceProps,\r\n      Math.max(0, lastMeasuredIndex),\r\n      offset\r\n    );\r\n  }\r\n};\r\n\r\nconst findNearestItemBinarySearch = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  high: number,\r\n  low: number,\r\n  offset: number\r\n): number => {\r\n  while (low <= high) {\r\n    const middle = low + Math.floor((high - low) / 2);\r\n    const currentOffset = getItemMetadata(\r\n      itemType,\r\n      props,\r\n      middle,\r\n      instanceProps\r\n    ).offset;\r\n\r\n    if (currentOffset === offset) {\r\n      return middle;\r\n    } else if (currentOffset < offset) {\r\n      low = middle + 1;\r\n    } else if (currentOffset > offset) {\r\n      high = middle - 1;\r\n    }\r\n  }\r\n\r\n  if (low > 0) {\r\n    return low - 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst findNearestItemExponentialSearch = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  index: number,\r\n  offset: number\r\n): number => {\r\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\r\n  let interval = 1;\r\n\r\n  while (\r\n    index < itemCount &&\r\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\r\n  ) {\r\n    index += interval;\r\n    interval *= 2;\r\n  }\r\n\r\n  return findNearestItemBinarySearch(\r\n    itemType,\r\n    props,\r\n    instanceProps,\r\n    Math.min(index, itemCount - 1),\r\n    Math.floor(index / 2),\r\n    offset\r\n  );\r\n};\r\n\r\nconst getOffsetForIndexAndAlignment = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: InstanceProps,\r\n  scrollbarSize: number\r\n): number => {\r\n  const size = itemType === 'column' ? props.width : props.height;\r\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\r\n\r\n  // Get estimated total size after ItemMetadata is computed,\r\n  // To ensure it reflects actual measurements instead of just estimates.\r\n  const estimatedTotalSize =\r\n    itemType === 'column'\r\n      ? getEstimatedTotalWidth(props, instanceProps)\r\n      : getEstimatedTotalHeight(props, instanceProps);\r\n\r\n  const maxOffset = Math.max(\r\n    0,\r\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\r\n  );\r\n  const minOffset = Math.max(\r\n    0,\r\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\r\n  );\r\n\r\n  if (align === 'smart') {\r\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\r\n      align = 'auto';\r\n    } else {\r\n      align = 'center';\r\n    }\r\n  }\r\n\r\n  switch (align) {\r\n    case 'start':\r\n      return maxOffset;\r\n    case 'end':\r\n      return minOffset;\r\n    case 'center':\r\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\r\n    case 'auto':\r\n    default:\r\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n        return scrollOffset;\r\n      } else if (minOffset > maxOffset) {\r\n        // Because we only take into account the scrollbar size when calculating minOffset\r\n        // this value can be larger than maxOffset when at the end of the list\r\n        return minOffset;\r\n      } else if (scrollOffset < minOffset) {\r\n        return minOffset;\r\n      } else {\r\n        return maxOffset;\r\n      }\r\n  }\r\n};\r\n\r\nconst VariableSizeGrid = createGridComponent({\r\n  getColumnOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\r\n\r\n  getColumnStartIndexForOffset: (\r\n    props: Props<any>,\r\n    scrollLeft: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\r\n\r\n  getColumnStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollLeft: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { columnCount, width } = props;\r\n\r\n    const itemMetadata = getItemMetadata(\r\n      'column',\r\n      props,\r\n      startIndex,\r\n      instanceProps\r\n    );\r\n    const maxOffset = scrollLeft + width;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  getColumnWidth: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.columnMetadataMap[index].size,\r\n\r\n  getEstimatedTotalHeight,\r\n  getEstimatedTotalWidth,\r\n\r\n  getOffsetForColumnAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number =>\r\n    getOffsetForIndexAndAlignment(\r\n      'column',\r\n      props,\r\n      index,\r\n      align,\r\n      scrollOffset,\r\n      instanceProps,\r\n      scrollbarSize\r\n    ),\r\n\r\n  getOffsetForRowAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number =>\r\n    getOffsetForIndexAndAlignment(\r\n      'row',\r\n      props,\r\n      index,\r\n      align,\r\n      scrollOffset,\r\n      instanceProps,\r\n      scrollbarSize\r\n    ),\r\n\r\n  getRowOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\r\n\r\n  getRowHeight: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.rowMetadataMap[index].size,\r\n\r\n  getRowStartIndexForOffset: (\r\n    props: Props<any>,\r\n    scrollTop: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\r\n\r\n  getRowStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollTop: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { rowCount, height } = props;\r\n\r\n    const itemMetadata = getItemMetadata(\r\n      'row',\r\n      props,\r\n      startIndex,\r\n      instanceProps\r\n    );\r\n    const maxOffset = scrollTop + height;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\r\n    const {\r\n      estimatedColumnWidth,\r\n      estimatedRowHeight,\r\n    } = ((props: any): VariableSizeProps);\r\n\r\n    const instanceProps = {\r\n      columnMetadataMap: {},\r\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      lastMeasuredColumnIndex: -1,\r\n      lastMeasuredRowIndex: -1,\r\n      rowMetadataMap: {},\r\n    };\r\n\r\n    instance.resetAfterColumnIndex = (\r\n      columnIndex: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\r\n    };\r\n\r\n    instance.resetAfterRowIndex = (\r\n      rowIndex: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\r\n    };\r\n\r\n    instance.resetAfterIndices = ({\r\n      columnIndex,\r\n      rowIndex,\r\n      shouldForceUpdate = true,\r\n    }: {\r\n      columnIndex?: number,\r\n      rowIndex?: number,\r\n      shouldForceUpdate: boolean,\r\n    }) => {\r\n      if (typeof columnIndex === 'number') {\r\n        instanceProps.lastMeasuredColumnIndex = Math.min(\r\n          instanceProps.lastMeasuredColumnIndex,\r\n          columnIndex - 1\r\n        );\r\n      }\r\n      if (typeof rowIndex === 'number') {\r\n        instanceProps.lastMeasuredRowIndex = Math.min(\r\n          instanceProps.lastMeasuredRowIndex,\r\n          rowIndex - 1\r\n        );\r\n      }\r\n\r\n      // We could potentially optimize further by only evicting styles after this index,\r\n      // But since styles are only cached while scrolling is in progress-\r\n      // It seems an unnecessary optimization.\r\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\r\n      instance._getItemStyleCache(-1);\r\n\r\n      if (shouldForceUpdate) {\r\n        instance.forceUpdate();\r\n      }\r\n    };\r\n\r\n    return instanceProps;\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: false,\r\n\r\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof columnWidth !== 'function') {\r\n        throw Error(\r\n          'An invalid \"columnWidth\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${\r\n              columnWidth === null ? 'null' : typeof columnWidth\r\n            }\" was specified.`\r\n        );\r\n      } else if (typeof rowHeight !== 'function') {\r\n        throw Error(\r\n          'An invalid \"rowHeight\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default VariableSizeGrid;\r\n","// @flow\r\n\r\nimport memoizeOne from 'memoize-one';\r\nimport { createElement, PureComponent } from 'react';\r\nimport { cancelTimeout, requestTimeout } from './timer';\r\nimport { getRTLOffsetType } from './domHelpers';\r\n\r\nimport type { TimeoutID } from './timer';\r\n\r\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\r\n\r\ntype itemSize = number | ((index: number) => number);\r\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\r\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\r\ntype Layout = 'horizontal' | 'vertical';\r\n\r\ntype RenderComponentProps<T> = {|\r\n  data: T,\r\n  index: number,\r\n  isScrolling?: boolean,\r\n  style: Object,\r\n|};\r\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\r\n\r\ntype ScrollDirection = 'forward' | 'backward';\r\n\r\ntype onItemsRenderedCallback = ({\r\n  overscanStartIndex: number,\r\n  overscanStopIndex: number,\r\n  visibleStartIndex: number,\r\n  visibleStopIndex: number,\r\n}) => void;\r\ntype onScrollCallback = ({\r\n  scrollDirection: ScrollDirection,\r\n  scrollOffset: number,\r\n  scrollUpdateWasRequested: boolean,\r\n}) => void;\r\n\r\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\r\ntype ItemStyleCache = { [index: number]: Object };\r\n\r\ntype OuterProps = {|\r\n  children: React$Node,\r\n  className: string | void,\r\n  onScroll: ScrollEvent => void,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\ntype InnerProps = {|\r\n  children: React$Node,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\nexport type Props<T> = {|\r\n  children: RenderComponent<T>,\r\n  className?: string,\r\n  direction: Direction,\r\n  height: number | string,\r\n  initialScrollOffset?: number,\r\n  innerRef?: any,\r\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\r\n  innerTagName?: string, // deprecated\r\n  itemCount: number,\r\n  itemData: T,\r\n  itemKey?: (index: number, data: T) => any,\r\n  itemSize: itemSize,\r\n  layout: Layout,\r\n  onItemsRendered?: onItemsRenderedCallback,\r\n  onScroll?: onScrollCallback,\r\n  outerRef?: any,\r\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\r\n  outerTagName?: string, // deprecated\r\n  overscanCount: number,\r\n  style?: Object,\r\n  useIsScrolling: boolean,\r\n  width: number | string,\r\n|};\r\n\r\ntype State = {|\r\n  instance: any,\r\n  isScrolling: boolean,\r\n  scrollDirection: ScrollDirection,\r\n  scrollOffset: number,\r\n  scrollUpdateWasRequested: boolean,\r\n|};\r\n\r\ntype GetItemOffset = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetItemSize = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\r\ntype GetOffsetForIndexAndAlignment = (\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStartIndexForOffset = (\r\n  props: Props<any>,\r\n  offset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStopIndexForStartIndex = (\r\n  props: Props<any>,\r\n  startIndex: number,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\r\ntype ValidateProps = (props: Props<any>) => void;\r\n\r\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\r\n\r\nconst defaultItemKey = (index: number, data: any) => index;\r\n\r\n// In DEV mode, this Set helps us only log a warning once per component instance.\r\n// This avoids spamming the console every time a render happens.\r\nlet devWarningsDirection = null;\r\nlet devWarningsTagName = null;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\r\n    devWarningsDirection = new WeakSet();\r\n    devWarningsTagName = new WeakSet();\r\n  }\r\n}\r\n\r\nexport default function createListComponent({\r\n  getItemOffset,\r\n  getEstimatedTotalSize,\r\n  getItemSize,\r\n  getOffsetForIndexAndAlignment,\r\n  getStartIndexForOffset,\r\n  getStopIndexForStartIndex,\r\n  initInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange,\r\n  validateProps,\r\n}: {|\r\n  getItemOffset: GetItemOffset,\r\n  getEstimatedTotalSize: GetEstimatedTotalSize,\r\n  getItemSize: GetItemSize,\r\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\r\n  getStartIndexForOffset: GetStartIndexForOffset,\r\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  initInstanceProps: InitInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange: boolean,\r\n  validateProps: ValidateProps,\r\n|}) {\r\n  return class List<T> extends PureComponent<Props<T>, State> {\r\n    _instanceProps: any = initInstanceProps(this.props, this);\r\n    _outerRef: ?HTMLDivElement;\r\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\r\n\r\n    static defaultProps = {\r\n      direction: 'ltr',\r\n      itemData: undefined,\r\n      layout: 'vertical',\r\n      overscanCount: 2,\r\n      useIsScrolling: false,\r\n    };\r\n\r\n    state: State = {\r\n      instance: this,\r\n      isScrolling: false,\r\n      scrollDirection: 'forward',\r\n      scrollOffset:\r\n        typeof this.props.initialScrollOffset === 'number'\r\n          ? this.props.initialScrollOffset\r\n          : 0,\r\n      scrollUpdateWasRequested: false,\r\n    };\r\n\r\n    // Always use explicit constructor for React components.\r\n    // It produces less code after transpilation. (#26)\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props: Props<T>) {\r\n      super(props);\r\n    }\r\n\r\n    static getDerivedStateFromProps(\r\n      nextProps: Props<T>,\r\n      prevState: State\r\n    ): $Shape<State> | null {\r\n      validateSharedProps(nextProps, prevState);\r\n      validateProps(nextProps);\r\n      return null;\r\n    }\r\n\r\n    scrollTo(scrollOffset: number): void {\r\n      scrollOffset = Math.max(0, scrollOffset);\r\n\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === scrollOffset) {\r\n          return null;\r\n        }\r\n        return {\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\r\n          scrollOffset: scrollOffset,\r\n          scrollUpdateWasRequested: true,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    }\r\n\r\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\r\n      const { itemCount } = this.props;\r\n      const { scrollOffset } = this.state;\r\n\r\n      index = Math.max(0, Math.min(index, itemCount - 1));\r\n\r\n      this.scrollTo(\r\n        getOffsetForIndexAndAlignment(\r\n          this.props,\r\n          index,\r\n          align,\r\n          scrollOffset,\r\n          this._instanceProps\r\n        )\r\n      );\r\n    }\r\n\r\n    componentDidMount() {\r\n      const { direction, initialScrollOffset, layout } = this.props;\r\n\r\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        // TODO Deprecate direction \"horizontal\"\r\n        if (direction === 'horizontal' || layout === 'horizontal') {\r\n          outerRef.scrollLeft = initialScrollOffset;\r\n        } else {\r\n          outerRef.scrollTop = initialScrollOffset;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const { direction, layout } = this.props;\r\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\r\n\r\n      if (scrollUpdateWasRequested && this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n\r\n        // TODO Deprecate direction \"horizontal\"\r\n        if (direction === 'horizontal' || layout === 'horizontal') {\r\n          if (direction === 'rtl') {\r\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\r\n            switch (getRTLOffsetType()) {\r\n              case 'negative':\r\n                outerRef.scrollLeft = -scrollOffset;\r\n                break;\r\n              case 'positive-ascending':\r\n                outerRef.scrollLeft = scrollOffset;\r\n                break;\r\n              default:\r\n                const { clientWidth, scrollWidth } = outerRef;\r\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\r\n                break;\r\n            }\r\n          } else {\r\n            outerRef.scrollLeft = scrollOffset;\r\n          }\r\n        } else {\r\n          outerRef.scrollTop = scrollOffset;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        children,\r\n        className,\r\n        direction,\r\n        height,\r\n        innerRef,\r\n        innerElementType,\r\n        innerTagName,\r\n        itemCount,\r\n        itemData,\r\n        itemKey = defaultItemKey,\r\n        layout,\r\n        outerElementType,\r\n        outerTagName,\r\n        style,\r\n        useIsScrolling,\r\n        width,\r\n      } = this.props;\r\n      const { isScrolling } = this.state;\r\n\r\n      // TODO Deprecate direction \"horizontal\"\r\n      const isHorizontal =\r\n        direction === 'horizontal' || layout === 'horizontal';\r\n\r\n      const onScroll = isHorizontal\r\n        ? this._onScrollHorizontal\r\n        : this._onScrollVertical;\r\n\r\n      const [startIndex, stopIndex] = this._getRangeToRender();\r\n\r\n      const items = [];\r\n      if (itemCount > 0) {\r\n        for (let index = startIndex; index <= stopIndex; index++) {\r\n          items.push(\r\n            createElement(children, {\r\n              data: itemData,\r\n              key: itemKey(index, itemData),\r\n              index,\r\n              isScrolling: useIsScrolling ? isScrolling : undefined,\r\n              style: this._getItemStyle(index),\r\n            })\r\n          );\r\n        }\r\n      }\r\n\r\n      // Read this value AFTER items have been created,\r\n      // So their actual sizes (if variable) are taken into consideration.\r\n      const estimatedTotalSize = getEstimatedTotalSize(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      return createElement(\r\n        outerElementType || outerTagName || 'div',\r\n        {\r\n          className,\r\n          onScroll,\r\n          ref: this._outerRefSetter,\r\n          style: {\r\n            position: 'relative',\r\n            height,\r\n            width,\r\n            overflow: 'auto',\r\n            WebkitOverflowScrolling: 'touch',\r\n            willChange: 'transform',\r\n            direction,\r\n            ...style,\r\n          },\r\n        },\r\n        createElement(innerElementType || innerTagName || 'div', {\r\n          children: items,\r\n          ref: innerRef,\r\n          style: {\r\n            height: isHorizontal ? '100%' : estimatedTotalSize,\r\n            pointerEvents: isScrolling ? 'none' : undefined,\r\n            width: isHorizontal ? estimatedTotalSize : '100%',\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    _callOnItemsRendered: (\r\n      overscanStartIndex: number,\r\n      overscanStopIndex: number,\r\n      visibleStartIndex: number,\r\n      visibleStopIndex: number\r\n    ) => void;\r\n    _callOnItemsRendered = memoizeOne(\r\n      (\r\n        overscanStartIndex: number,\r\n        overscanStopIndex: number,\r\n        visibleStartIndex: number,\r\n        visibleStopIndex: number\r\n      ) =>\r\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\r\n          overscanStartIndex,\r\n          overscanStopIndex,\r\n          visibleStartIndex,\r\n          visibleStopIndex,\r\n        })\r\n    );\r\n\r\n    _callOnScroll: (\r\n      scrollDirection: ScrollDirection,\r\n      scrollOffset: number,\r\n      scrollUpdateWasRequested: boolean\r\n    ) => void;\r\n    _callOnScroll = memoizeOne(\r\n      (\r\n        scrollDirection: ScrollDirection,\r\n        scrollOffset: number,\r\n        scrollUpdateWasRequested: boolean\r\n      ) =>\r\n        ((this.props.onScroll: any): onScrollCallback)({\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested,\r\n        })\r\n    );\r\n\r\n    _callPropsCallbacks() {\r\n      if (typeof this.props.onItemsRendered === 'function') {\r\n        const { itemCount } = this.props;\r\n        if (itemCount > 0) {\r\n          const [\r\n            overscanStartIndex,\r\n            overscanStopIndex,\r\n            visibleStartIndex,\r\n            visibleStopIndex,\r\n          ] = this._getRangeToRender();\r\n          this._callOnItemsRendered(\r\n            overscanStartIndex,\r\n            overscanStopIndex,\r\n            visibleStartIndex,\r\n            visibleStopIndex\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof this.props.onScroll === 'function') {\r\n        const {\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested,\r\n        } = this.state;\r\n        this._callOnScroll(\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested\r\n        );\r\n      }\r\n    }\r\n\r\n    // Lazily create and cache item styles while scrolling,\r\n    // So that pure component sCU will prevent re-renders.\r\n    // We maintain this cache, and pass a style prop rather than index,\r\n    // So that List can clear cached styles and force item re-render if necessary.\r\n    _getItemStyle: (index: number) => Object;\r\n    _getItemStyle = (index: number): Object => {\r\n      const { direction, itemSize, layout } = this.props;\r\n\r\n      const itemStyleCache = this._getItemStyleCache(\r\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\r\n        shouldResetStyleCacheOnItemSizeChange && layout,\r\n        shouldResetStyleCacheOnItemSizeChange && direction\r\n      );\r\n\r\n      let style;\r\n      if (itemStyleCache.hasOwnProperty(index)) {\r\n        style = itemStyleCache[index];\r\n      } else {\r\n        const offset = getItemOffset(this.props, index, this._instanceProps);\r\n        const size = getItemSize(this.props, index, this._instanceProps);\r\n\r\n        // TODO Deprecate direction \"horizontal\"\r\n        const isHorizontal =\r\n          direction === 'horizontal' || layout === 'horizontal';\r\n\r\n        const isRtl = direction === 'rtl';\r\n        const offsetHorizontal = isHorizontal ? offset : 0;\r\n        itemStyleCache[index] = style = {\r\n          position: 'absolute',\r\n          left: isRtl ? undefined : offsetHorizontal,\r\n          right: isRtl ? offsetHorizontal : undefined,\r\n          top: !isHorizontal ? offset : 0,\r\n          height: !isHorizontal ? size : '100%',\r\n          width: isHorizontal ? size : '100%',\r\n        };\r\n      }\r\n\r\n      return style;\r\n    };\r\n\r\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\r\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\r\n\r\n    _getRangeToRender(): [number, number, number, number] {\r\n      const { itemCount, overscanCount } = this.props;\r\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\r\n\r\n      if (itemCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getStartIndexForOffset(\r\n        this.props,\r\n        scrollOffset,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollOffset,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || scrollDirection === 'backward'\r\n          ? Math.max(1, overscanCount)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || scrollDirection === 'forward'\r\n          ? Math.max(1, overscanCount)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _onScrollHorizontal = (event: ScrollEvent): void => {\r\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === scrollLeft) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        const { direction } = this.props;\r\n\r\n        let scrollOffset = scrollLeft;\r\n        if (direction === 'rtl') {\r\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\r\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              scrollOffset = -scrollLeft;\r\n              break;\r\n            case 'positive-descending':\r\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        scrollOffset = Math.max(\r\n          0,\r\n          Math.min(scrollOffset, scrollWidth - clientWidth)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\r\n          scrollOffset,\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _onScrollVertical = (event: ScrollEvent): void => {\r\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === scrollTop) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        const scrollOffset = Math.max(\r\n          0,\r\n          Math.min(scrollTop, scrollHeight - clientHeight)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\r\n          scrollOffset,\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _outerRefSetter = (ref: any): void => {\r\n      const { outerRef } = this.props;\r\n\r\n      this._outerRef = ((ref: any): HTMLDivElement);\r\n\r\n      if (typeof outerRef === 'function') {\r\n        outerRef(ref);\r\n      } else if (\r\n        outerRef != null &&\r\n        typeof outerRef === 'object' &&\r\n        outerRef.hasOwnProperty('current')\r\n      ) {\r\n        outerRef.current = ref;\r\n      }\r\n    };\r\n\r\n    _resetIsScrollingDebounced = () => {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n\r\n      this._resetIsScrollingTimeoutId = requestTimeout(\r\n        this._resetIsScrolling,\r\n        IS_SCROLLING_DEBOUNCE_INTERVAL\r\n      );\r\n    };\r\n\r\n    _resetIsScrolling = () => {\r\n      this._resetIsScrollingTimeoutId = null;\r\n\r\n      this.setState({ isScrolling: false }, () => {\r\n        // Clear style cache after state update has been committed.\r\n        // This way we don't break pure sCU for items that don't use isScrolling param.\r\n        this._getItemStyleCache(-1, null);\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\r\n// This would avoid ever calling the render function for the same index more than once,\r\n// But it would also add the overhead of a lot of components/fibers.\r\n// I assume people already do this (render function returning a class component),\r\n// So my doing it would just unnecessarily double the wrappers.\r\n\r\nconst validateSharedProps = (\r\n  {\r\n    children,\r\n    direction,\r\n    height,\r\n    layout,\r\n    innerTagName,\r\n    outerTagName,\r\n    width,\r\n  }: Props<any>,\r\n  { instance }: State\r\n): void => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (innerTagName != null || outerTagName != null) {\r\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\r\n        devWarningsTagName.add(instance);\r\n        console.warn(\r\n          'The innerTagName and outerTagName props have been deprecated. ' +\r\n            'Please use the innerElementType and outerElementType props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n\r\n    switch (direction) {\r\n      case 'horizontal':\r\n      case 'vertical':\r\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\r\n          devWarningsDirection.add(instance);\r\n          console.warn(\r\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\r\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\r\n          );\r\n        }\r\n        break;\r\n      case 'ltr':\r\n      case 'rtl':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"direction\" prop has been specified. ' +\r\n            'Value should be either \"ltr\" or \"rtl\". ' +\r\n            `\"${direction}\" was specified.`\r\n        );\r\n    }\r\n\r\n    switch (layout) {\r\n      case 'horizontal':\r\n      case 'vertical':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"layout\" prop has been specified. ' +\r\n            'Value should be either \"horizontal\" or \"vertical\". ' +\r\n            `\"${layout}\" was specified.`\r\n        );\r\n    }\r\n\r\n    if (children == null) {\r\n      throw Error(\r\n        'An invalid \"children\" prop has been specified. ' +\r\n          'Value should be a React component. ' +\r\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\r\n      );\r\n    }\r\n\r\n    if (isHorizontal && typeof width !== 'number') {\r\n      throw Error(\r\n        'An invalid \"width\" prop has been specified. ' +\r\n          'Horizontal lists must specify a number for width. ' +\r\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\r\n      );\r\n    } else if (!isHorizontal && typeof height !== 'number') {\r\n      throw Error(\r\n        'An invalid \"height\" prop has been specified. ' +\r\n          'Vertical lists must specify a number for height. ' +\r\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\r\n      );\r\n    }\r\n  }\r\n};\r\n","// @flow\r\n\r\nimport createListComponent from './createListComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createListComponent';\r\n\r\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\r\n\r\ntype VariableSizeProps = {|\r\n  estimatedItemSize: number,\r\n  ...Props<any>,\r\n|};\r\n\r\ntype itemSizeGetter = (index: number) => number;\r\n\r\ntype ItemMetadata = {|\r\n  offset: number,\r\n  size: number,\r\n|};\r\ntype InstanceProps = {|\r\n  itemMetadataMap: { [index: number]: ItemMetadata },\r\n  estimatedItemSize: number,\r\n  lastMeasuredIndex: number,\r\n|};\r\n\r\nconst getItemMetadata = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: InstanceProps\r\n): ItemMetadata => {\r\n  const { itemSize } = ((props: any): VariableSizeProps);\r\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\r\n\r\n  if (index > lastMeasuredIndex) {\r\n    let offset = 0;\r\n    if (lastMeasuredIndex >= 0) {\r\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n      offset = itemMetadata.offset + itemMetadata.size;\r\n    }\r\n\r\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\r\n      let size = ((itemSize: any): itemSizeGetter)(i);\r\n\r\n      itemMetadataMap[i] = {\r\n        offset,\r\n        size,\r\n      };\r\n\r\n      offset += size;\r\n    }\r\n\r\n    instanceProps.lastMeasuredIndex = index;\r\n  }\r\n\r\n  return itemMetadataMap[index];\r\n};\r\n\r\nconst findNearestItem = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  offset: number\r\n) => {\r\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\r\n\r\n  const lastMeasuredItemOffset =\r\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\r\n\r\n  if (lastMeasuredItemOffset >= offset) {\r\n    // If we've already measured items within this range just use a binary search as it's faster.\r\n    return findNearestItemBinarySearch(\r\n      props,\r\n      instanceProps,\r\n      lastMeasuredIndex,\r\n      0,\r\n      offset\r\n    );\r\n  } else {\r\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\r\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\r\n    // The overall complexity for this approach is O(log n).\r\n    return findNearestItemExponentialSearch(\r\n      props,\r\n      instanceProps,\r\n      Math.max(0, lastMeasuredIndex),\r\n      offset\r\n    );\r\n  }\r\n};\r\n\r\nconst findNearestItemBinarySearch = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  high: number,\r\n  low: number,\r\n  offset: number\r\n): number => {\r\n  while (low <= high) {\r\n    const middle = low + Math.floor((high - low) / 2);\r\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\r\n\r\n    if (currentOffset === offset) {\r\n      return middle;\r\n    } else if (currentOffset < offset) {\r\n      low = middle + 1;\r\n    } else if (currentOffset > offset) {\r\n      high = middle - 1;\r\n    }\r\n  }\r\n\r\n  if (low > 0) {\r\n    return low - 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst findNearestItemExponentialSearch = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  index: number,\r\n  offset: number\r\n): number => {\r\n  const { itemCount } = props;\r\n  let interval = 1;\r\n\r\n  while (\r\n    index < itemCount &&\r\n    getItemMetadata(props, index, instanceProps).offset < offset\r\n  ) {\r\n    index += interval;\r\n    interval *= 2;\r\n  }\r\n\r\n  return findNearestItemBinarySearch(\r\n    props,\r\n    instanceProps,\r\n    Math.min(index, itemCount - 1),\r\n    Math.floor(index / 2),\r\n    offset\r\n  );\r\n};\r\n\r\nconst getEstimatedTotalSize = (\r\n  { itemCount }: Props<any>,\r\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredItems = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredIndex >= itemCount) {\r\n    lastMeasuredIndex = itemCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredIndex >= 0) {\r\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\r\n\r\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst VariableSizeList = createListComponent({\r\n  getItemOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata(props, index, instanceProps).offset,\r\n\r\n  getItemSize: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.itemMetadataMap[index].size,\r\n\r\n  getEstimatedTotalSize,\r\n\r\n  getOffsetForIndexAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { direction, height, layout, width } = props;\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\r\n\r\n    // Get estimated total size after ItemMetadata is computed,\r\n    // To ensure it reflects actual measurements instead of just estimates.\r\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\r\n\r\n    const maxOffset = Math.max(\r\n      0,\r\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      itemMetadata.offset - size + itemMetadata.size\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (\r\n        scrollOffset >= minOffset - size &&\r\n        scrollOffset <= maxOffset + size\r\n      ) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\r\n      case 'auto':\r\n      default:\r\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n          return scrollOffset;\r\n        } else if (scrollOffset < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getStartIndexForOffset: (\r\n    props: Props<any>,\r\n    offset: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem(props, instanceProps, offset),\r\n\r\n  getStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { direction, height, itemCount, layout, width } = props;\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\r\n    const maxOffset = scrollOffset + size;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\r\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\r\n\r\n    const instanceProps = {\r\n      itemMetadataMap: {},\r\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      lastMeasuredIndex: -1,\r\n    };\r\n\r\n    instance.resetAfterIndex = (\r\n      index: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instanceProps.lastMeasuredIndex = Math.min(\r\n        instanceProps.lastMeasuredIndex,\r\n        index - 1\r\n      );\r\n\r\n      // We could potentially optimize further by only evicting styles after this index,\r\n      // But since styles are only cached while scrolling is in progress-\r\n      // It seems an unnecessary optimization.\r\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\r\n      instance._getItemStyleCache(-1);\r\n\r\n      if (shouldForceUpdate) {\r\n        instance.forceUpdate();\r\n      }\r\n    };\r\n\r\n    return instanceProps;\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: false,\r\n\r\n  validateProps: ({ itemSize }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof itemSize !== 'function') {\r\n        throw Error(\r\n          'An invalid \"itemSize\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default VariableSizeList;\r\n","// @flow\r\n\r\nimport createGridComponent from './createGridComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createGridComponent';\r\n\r\nconst FixedSizeGrid = createGridComponent({\r\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\r\n    index * ((columnWidth: any): number),\r\n\r\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\r\n    ((columnWidth: any): number),\r\n\r\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\r\n    index * ((rowHeight: any): number),\r\n\r\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\r\n    ((rowHeight: any): number),\r\n\r\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\r\n    ((rowHeight: any): number) * rowCount,\r\n\r\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\r\n    ((columnWidth: any): number) * columnCount,\r\n\r\n  getOffsetForColumnAndAlignment: (\r\n    { columnCount, columnWidth, width }: Props<any>,\r\n    columnIndex: number,\r\n    align: ScrollToAlign,\r\n    scrollLeft: number,\r\n    instanceProps: typeof undefined,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    const lastColumnOffset = Math.max(\r\n      0,\r\n      columnCount * ((columnWidth: any): number) - width\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastColumnOffset,\r\n      columnIndex * ((columnWidth: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      columnIndex * ((columnWidth: any): number) -\r\n        width +\r\n        scrollbarSize +\r\n        ((columnWidth: any): number)\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(width / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\r\n          return lastColumnOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      case 'auto':\r\n      default:\r\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\r\n          return scrollLeft;\r\n        } else if (minOffset > maxOffset) {\r\n          // Because we only take into account the scrollbar size when calculating minOffset\r\n          // this value can be larger than maxOffset when at the end of the list\r\n          return minOffset;\r\n        } else if (scrollLeft < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getOffsetForRowAndAlignment: (\r\n    { rowHeight, height, rowCount }: Props<any>,\r\n    rowIndex: number,\r\n    align: ScrollToAlign,\r\n    scrollTop: number,\r\n    instanceProps: typeof undefined,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    const lastRowOffset = Math.max(\r\n      0,\r\n      rowCount * ((rowHeight: any): number) - height\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastRowOffset,\r\n      rowIndex * ((rowHeight: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      rowIndex * ((rowHeight: any): number) -\r\n        height +\r\n        scrollbarSize +\r\n        ((rowHeight: any): number)\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(height / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\r\n          return lastRowOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      case 'auto':\r\n      default:\r\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\r\n          return scrollTop;\r\n        } else if (minOffset > maxOffset) {\r\n          // Because we only take into account the scrollbar size when calculating minOffset\r\n          // this value can be larger than maxOffset when at the end of the list\r\n          return minOffset;\r\n        } else if (scrollTop < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getColumnStartIndexForOffset: (\r\n    { columnWidth, columnCount }: Props<any>,\r\n    scrollLeft: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(\r\n        columnCount - 1,\r\n        Math.floor(scrollLeft / ((columnWidth: any): number))\r\n      )\r\n    ),\r\n\r\n  getColumnStopIndexForStartIndex: (\r\n    { columnWidth, columnCount, width }: Props<any>,\r\n    startIndex: number,\r\n    scrollLeft: number\r\n  ): number => {\r\n    const left = startIndex * ((columnWidth: any): number);\r\n    const numVisibleColumns = Math.ceil(\r\n      (width + scrollLeft - left) / ((columnWidth: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        columnCount - 1,\r\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  getRowStartIndexForOffset: (\r\n    { rowHeight, rowCount }: Props<any>,\r\n    scrollTop: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\r\n    ),\r\n\r\n  getRowStopIndexForStartIndex: (\r\n    { rowHeight, rowCount, height }: Props<any>,\r\n    startIndex: number,\r\n    scrollTop: number\r\n  ): number => {\r\n    const top = startIndex * ((rowHeight: any): number);\r\n    const numVisibleRows = Math.ceil(\r\n      (height + scrollTop - top) / ((rowHeight: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        rowCount - 1,\r\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>): any {\r\n    // Noop\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: true,\r\n\r\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof columnWidth !== 'number') {\r\n        throw Error(\r\n          'An invalid \"columnWidth\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${\r\n              columnWidth === null ? 'null' : typeof columnWidth\r\n            }\" was specified.`\r\n        );\r\n      }\r\n\r\n      if (typeof rowHeight !== 'number') {\r\n        throw Error(\r\n          'An invalid \"rowHeight\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default FixedSizeGrid;\r\n","// @flow\r\n\r\nimport createListComponent from './createListComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createListComponent';\r\n\r\nconst FixedSizeList = createListComponent({\r\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\r\n    index * ((itemSize: any): number),\r\n\r\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\r\n    ((itemSize: any): number),\r\n\r\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\r\n    ((itemSize: any): number) * itemCount,\r\n\r\n  getOffsetForIndexAndAlignment: (\r\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number\r\n  ): number => {\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const lastItemOffset = Math.max(\r\n      0,\r\n      itemCount * ((itemSize: any): number) - size\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastItemOffset,\r\n      index * ((itemSize: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (\r\n        scrollOffset >= minOffset - size &&\r\n        scrollOffset <= maxOffset + size\r\n      ) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center': {\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(size / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\r\n          return lastItemOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      }\r\n      case 'auto':\r\n      default:\r\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n          return scrollOffset;\r\n        } else if (scrollOffset < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getStartIndexForOffset: (\r\n    { itemCount, itemSize }: Props<any>,\r\n    offset: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\r\n    ),\r\n\r\n  getStopIndexForStartIndex: (\r\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\r\n    startIndex: number,\r\n    scrollOffset: number\r\n  ): number => {\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const offset = startIndex * ((itemSize: any): number);\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const numVisibleItems = Math.ceil(\r\n      (size + scrollOffset - offset) / ((itemSize: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        itemCount - 1,\r\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>): any {\r\n    // Noop\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: true,\r\n\r\n  validateProps: ({ itemSize }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof itemSize !== 'number') {\r\n        throw Error(\r\n          'An invalid \"itemSize\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default FixedSizeList;\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\r\n\r\n// Pulled from react-compat\r\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\r\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\r\n  for (let attribute in prev) {\r\n    if (!(attribute in next)) {\r\n      return true;\r\n    }\r\n  }\r\n  for (let attribute in next) {\r\n    if (prev[attribute] !== next[attribute]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","// @flow\r\n\r\nimport shallowDiffers from './shallowDiffers';\r\n\r\n// Custom comparison function for React.memo().\r\n// It knows to compare individual style props and ignore the wrapper object.\r\n// See https://reactjs.org/docs/react-api.html#reactmemo\r\nexport default function areEqual(\r\n  prevProps: Object,\r\n  nextProps: Object\r\n): boolean {\r\n  const { style: prevStyle, ...prevRest } = prevProps;\r\n  const { style: nextStyle, ...nextRest } = nextProps;\r\n\r\n  return (\r\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\r\n  );\r\n}\r\n","// @flow\r\n\r\nimport areEqual from './areEqual';\r\nimport shallowDiffers from './shallowDiffers';\r\n\r\n// Custom shouldComponentUpdate for class components.\r\n// It knows to compare individual style props and ignore the wrapper object.\r\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\r\nexport default function shouldComponentUpdate(\r\n  nextProps: Object,\r\n  nextState: Object\r\n): boolean {\r\n  return (\r\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\r\n  );\r\n}\r\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","self","ReferenceError","simpleIsEqual","newArgs","lastArgs","every","newArg","index","newValue","oldValue","resultFn","isEqual","lastThis","lastResult","calledOnce","_len","Array","_key","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","size","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","createElement","outerStyle","style","width","height","overflow","direction","innerDiv","innerStyle","appendChild","body","scrollLeft","removeChild","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","clientWidth","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","div","offsetWidth","getScrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","extraBottomRightElement","extraBottomLeftElement","extraTopLeftElement","extraTopRightElement","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","freezeRowCount","freezeColumnCount","freezeTopRightItems","topLeftStyle","freezeBottomLeftItems","freezeTopLeftItems","estimatedTotalWidth","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","findNearestItem","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","nextState"],"mappings":"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"}